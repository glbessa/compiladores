PARSER_BEGIN(Lugosi)

import ast.*;

public class Lugosi
{
    public static void main(String[] args) throws ParseException, java.io.IOException
    {
        Lugosi parser = new Lugosi(new java.io.FileReader(args[0]));
        Prog tree = parser.Lugosi();
        generateCode(tree, args[0]);
    }

    public static void generateCode(Prog tree, String filename)
    {
        
    }
}

PARSER_END(Lugosi)

SKIP : { " " | "\t" | "\r" | "\n" }

TOKEN :
{
    <VOID: "void"> 
    | <INT: "int"> 
    | <FLOAT: "float">
    | <BOOL: "bool"> 
    | <ENTRYFUNC: "main"> 
    | <OPEN_BRACKETS: "["> 
    | <CLOSE_BRACKETS: "]"> 
    | <OPEN_KEYS: "{"> 
    | <CLOSE_KEYS: "}"> 
    | <OPEN_BRACES: "("> 
    | <CLOSE_BRACES: ")"> 
    | <SEMICOLON: ";"> 
    | <COLON: ",">
    | <ASSIGN: ":=">
    | <SUM: "+">
    | <SUB: "-">
    | <MULT: "*">
    | <DIV: "/">
    | <AND: "&&">
    | <OR: "||">
    | <LT: "<">
    | <GT: ">">
    | <EQ: "==">
    | <PRINTIO: "printIO"> 
    | <READIO: "readIO">
    | <LET: "let"> 
    | <DEF: "def">
    | <IF: "if">
    | <WHILE: "while">
    | <DO: "do">
    | <RETURN: "return">
    | <TRUE: "true">
    | <FALSE: "false">
    | <NUM: (["0"-"9"])+ | (["0"-"9"])* "." (["0"-"9"])+>
    | <ID: [ "a"-"z" , "A"-"Z" ] ([ "a"-"z" , "A"-"Z" , "0"-"9" ])*>
}

void Lugosi():
{}
{
    Main() <OPEN_KEYS> Commands() <CLOSE_KEYS>
    <EOF>
}

void Main():
{}
{
    <VOID> <ENTRYFUNC> <OPEN_KEYS> VarDecl() SeqComandos() <CLOSE_KEYS>
}

void VarDecl():
{}
{
    (VarDecl() <LET> Tipo() <ID> <SEMICOLON>)?
}

void Tipo():
{}
{
    <FLOAT>
    | <BOOL>
    | <VOID>
}

// SeqComandos -> SeqComandos Comando | vazio
void SeqComandos():
{}
{
    SeqComandos() Comando()
}

// Comando -> ID ":=" EXP ";" |
void Comando():
{}
{
    <ID> <ASSIGN> Exp() <SEMICOLON>
    | <ID> <OPEN_BRACES> (ListaExp())? <SEMICOLON>
    | <IF> Exp() <OPEN_KEYS> SeqComandos() <CLOSE_KEYS> <SEMICOLON>
    | <WHILE> Exp() <DO> <OPEN_KEYS> SeqComandos() <CLOSE_KEYS> <SEMICOLON>
    | <ID> <ASSIGN> <READIO> <OPEN_BRACES> <CLOSE_BRACES> <SEMICOLON>
    | <RETURN> Exp() <SEMICOLON>
    | <PRINTIO> Exp() <SEMICOLON>
}

// TODO: fix grammar
void Exp() :
{Token t = null; Exp result = null;}
{
    <OPEN_BRACES> Exp() Op() Exp() <CLOSE_BRACES>
    | Fator()
}

// TODO: fix grammar
void Fator():
{}
{
    <ID>
    | <ID> <OPEN_BRACES> (ListaExp())? <CLOSE_BRACES>
    | <NUM>
    | <TRUE>
    | <FALSE>
}

void Op():
{}
{

}

void ListaExp():
{}
{
    Exp()
    | ListaExp() <COLON> Exp()
}

// TODO: fix grammar
void Func():
{}
{
    Func() <DEF> Tipo() <ID> <OPEN_BRACES> (ListaArg())? <CLOSE_BRACES> <OPEN_KEYS> VarDecl() SeqComandos() <CLOSE_KEYS>
    | <DEF> Tipo() <ID> <OPEN_BRACES> (ListaArg())? <CLOSE_BRACES> <OPEN_KEYS> VarDecl() SeqComandos() <CLOSE_KEYS>
}

void ListaArg():
{}
{
    Tipo() <ID> 
    | ListaArg() <COLON> Tipo() <ID>
}
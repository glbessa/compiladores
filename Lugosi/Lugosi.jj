PARSER_BEGIN(Lugosi)

import ast.*;
import java.util.ArrayList;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

public class Lugosi
{
    public static void main(String[] args) throws ParseException, java.io.IOException
    {
        Lugosi parser = new Lugosi(new java.io.FileReader(args[0]));
        Prog tree = parser.Lugosi();
        generateCode(tree, args[1]);
    }

    public static void generateCode(Prog tree, String filename)
    {
        String code = tree.genCode();
        File file = null;
        FileWriter fileWriter = null;
        try {
            file = new File(filename + ".java");
            fileWriter = new FileWriter(file);
            fileWriter.write(code);
            fileWriter.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}

PARSER_END(Lugosi)

SKIP : { " " | "\t" | "\r" | "\n" }

TOKEN :
{
    <VOID: "void"> 
    | <INT: "int"> 
    | <FLOAT: "float">
    | <BOOL: "bool"> 
    | <ENTRYFUNC: "main"> 
    | <OPEN_BRACKETS: "["> 
    | <CLOSE_BRACKETS: "]"> 
    | <OPEN_KEYS: "{"> 
    | <CLOSE_KEYS: "}"> 
    | <OPEN_BRACES: "("> 
    | <CLOSE_BRACES: ")"> 
    | <SEMICOLON: ";"> 
    | <COLON: ",">
    | <ASSIGN: ":=">
    | <SUM: "+">
    | <SUB: "-">
    | <MULT: "*">
    | <DIV: "/">
    | <AND: "&&">
    | <OR: "||">
    | <LT: "<">
    | <GT: ">">
    | <EQ: "==">
    | <PRINTIO: "printIO"> 
    | <READIO: "readIO">
    | <LET: "let"> 
    | <DEF: "def">
    | <IF: "if">
    | <WHILE: "while">
    | <DO: "do">
    | <RETURN: "return">
    | <TRUE: "true">
    | <FALSE: "false">
    | <NUM: (["0"-"9"])+ | (["0"-"9"])* "." (["0"-"9"])+>
    | <ID: [ "a"-"z" , "A"-"Z" ] ([ "a"-"z" , "A"-"Z" , "0"-"9" ])*>
}

Prog Lugosi():
{Main main = null; ArrayList<Fun> funcs = new ArrayList();}
{
    main=Main() funcs=Func()
    <EOF>
    { return new Prog(main, funcs); }
}

Main Main():
{ArrayList<VarDecl> varDecls = null; ArrayList<Comando> comandos = null;}
{
    <VOID> <ENTRYFUNC> <OPEN_KEYS> varDecls=VarDecl() comandos=SeqComandos() <CLOSE_KEYS>
    { return new Main(varDecls, comandos); }
}

ArrayList<VarDecl> VarDecl():
{String tipo = null; Token id = null; ArrayList<VarDecl> varDecls = new ArrayList();}
{
    ( <LET> tipo=Tipo() id=<ID> <SEMICOLON> { varDecls.add(new VarDecl(tipo, id.image)); } )+
    {return varDecls;}
}

String Tipo():
{Token t = null;}
{
    (t=<FLOAT>
    | t=<BOOL>
    | t=<VOID>)

    { return t.image; }
}

ArrayList<Comando> SeqComandos():
{Comando c = null; ArrayList<Comando> comandos = new ArrayList();}
{
    (c=Comando() { comandos.add(c); })+
    {return comandos;}
}

Comando Comando():
{Token id = null; Exp exp = null; ArrayList<Comando> bloco = null; Comando result = null; int line = 1;}
{
    (id=<ID> result=AtribuicaoLeituraChamadaFuncao(id) <SEMICOLON>
    | <IF> exp=Exp() <OPEN_KEYS> bloco=SeqComandos() <CLOSE_KEYS> <SEMICOLON> { result = new CIf(line, exp, bloco); }
    | <WHILE> exp=Exp() <DO> <OPEN_KEYS> bloco=SeqComandos() <CLOSE_KEYS> <SEMICOLON> { result = new CWhile(line, exp, bloco); }
    | <RETURN> exp=Exp() <SEMICOLON> { result = new CReturn(line, exp); }
    | (id=<PRINTIO> { line = id.beginLine; } exp=Exp() <SEMICOLON> {result = new CPrint(line, exp);}))

    {return result;}
}

Comando AtribuicaoLeituraChamadaFuncao(Token id):
{ArrayList<Exp> exps = null; Comando result = null;}
{
    (<OPEN_BRACES> (exps=ListaExp())? <CLOSE_BRACES> {result = new CChamadaFun(id.beginLine, id.image, exps);}
    | <ASSIGN> result=AtribuicaoLeitura(id))

    {return result;}
}

Comando AtribuicaoLeitura(Token id):
{Exp exp = null;}
{
    exp=Exp() {return new CAtribuicao(id.beginLine, id.image, exp);}
    | <READIO> <OPEN_BRACES> <CLOSE_BRACES> {return new CReadInput(id.beginLine, id.image);}
}

Exp Exp() :
{Token t = null; Exp e1 = null; Exp e2 = null; String op = null; Exp result = null;}
{
    (<OPEN_BRACES> e1=Exp() op=Op() e2=Exp() <CLOSE_BRACES> {result = new EOpExp(op, e1, e2);}
    | result=Fator())

    {return result;}
}

ArrayList<Exp> ListaExp():
{ArrayList exps = new ArrayList(); Exp exp = null;}
{
    exp=Exp()  {exps.add(exp);}
    (<COLON> exp=Exp() {exps.add(exp);})*
    {return exps;}
}

Exp Fator():
{Token t = null; Exp result = null;}
{
    (t=<ID> result=FatorId(t)
    | t=<NUM> { result = new EFloat(Float.parseFloat(t.image)); }
    | <TRUE> { result = new ETrue(); }
    | <FALSE> { result = new EFalse(); })

    {return result;}
}

Exp FatorId(Token t):
{ArrayList<Exp> args = new ArrayList();}
{
    <OPEN_BRACES> (args=ListaExp())? <CLOSE_BRACES> { return new EChamadaFun(t.image, args); }
    | { return new EVar(t.image); }
}

String Op():
{Token t = null;}
{
    (t=<SUM>
    | t=<SUB>
    | t=<MULT>
    | t=<DIV>
    | t=<AND>
    | t=<OR>
    | t=<LT>
    | t=<GT>
    | t=<EQ>)

    { return t.image; }
}

ArrayList<Fun> Func():
{String tipoRetorno = null; Token id = null; ArrayList<ParamFormalFun> args = new ArrayList(); ArrayList<VarDecl> varDecls = null; ArrayList<Comando> comandos = null; ArrayList<Fun> funcs = new ArrayList();}
{
    ( <DEF> tipoRetorno=Tipo() id=<ID> <OPEN_BRACES> (args=ListaArg())? <CLOSE_BRACES> <OPEN_KEYS> varDecls=VarDecl() comandos=SeqComandos() <CLOSE_KEYS> { funcs.add(new Fun(id.image, args, tipoRetorno, varDecls, comandos)); } )*
    {return funcs;}
}

ArrayList<ParamFormalFun> ListaArg():
{ParamFormalFun arg = null; ArrayList<ParamFormalFun> args = new ArrayList();}
{
    arg=Arg() {args.add(arg);}
    (<COLON> arg=Arg() {args.add(arg);})*
    {return args;}
}

ParamFormalFun Arg():
{Token id = null; String tipo = null;}
{
    tipo=Tipo() id=<ID>
    {return new ParamFormalFun(tipo, id.image);}
}